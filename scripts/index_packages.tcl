###
# SBIR DATA RIGHTS
# Contract No.: N00024-11-C-4120
# Contractor Name: Test & Evaluation Solutions, LLC
# Contractor Address: 400 Holiday CT, STE 204, Warrenton, VA 20186
#
# Expiration of SBIR Data Rights Period: 22 May 2017
#   The Government's rights to use, modify, reproduce, release, perform,
#   display, or disclose technical data or computer software marked with
#   this legend are restricted during the period shown as provided in
#   paragraph (b)(4) of the Rights in Noncommercial Technical Data and
#   Computer Software--Small Business Innovative Research (SBIR) Program
#   clause contained in the above identified contract. No restrictions
#   apply after the expiration date shown above. Any reproduction of
#   technical data, computer software, or portions thereof marked with
#   this legend must also reproduce the markings.
#
# Distribution Statement B: Distribution authorized to U.S. Government
# agencies only; (DFARS - SBIR Data Rights); 22 November 2010. Other
# requests for this document shall be referred to Naval Sea Systems
# Command ATTN: Small Business Innovation Research Program Office
# SEA05T1R, 1333 Isaac Hull Ave SE, Washington Navy Yard, DC 20376.
###

###
# ROUTINE TO BUILD A PACKAGE LOADER FOR EVERY EXTENSION
# STITCHED INTO AN ODIE BUILD
###

set base [file join [file dirname [file dirname [file normalize [info script]]]] plugin]
#source [file join $base .. scripts common.tcl]

set tclCompiler [lindex $argv 1]
set package_files {}
set stack {}

file delete [file join $base pkgIndex.tcl]

proc sniffPath {spath stackvar} {
  upvar 1 $stackvar stack    
  set result {}
  if { ![file isdirectory $spath] } return
  if { [string toupper [file tail $spath]] == "CVS" } return
  if {[file extension $spath] eq ".vfs"} return
  if {[file exists [file join $spath pkgIndex.tcl]]} {
      lappend result index [file join $spath pkgIndex.tcl]
  } else {
      foreach f [glob -nocomplain $spath/*.tcl] {
          lappend result source $f
      }
  }
  foreach f [glob -nocomplain $spath/*.tm] {
      lappend result module $f
  }
  foreach f [glob -nocomplain $spath/*.c] {
      lappend result csource $f
  }
  foreach f [glob -nocomplain $spath/*] {
    if [file isdirectory $f] {
      lappend stack $f
    }
  }
  return $result
}

puts $base
set stack $base
#set result [sniffPath $base stack]
#puts [list result $result]
set fout [open [file join $base plugin.rc] w]
puts $fout {###
# Irm Plugin initializer file
# this file is automatically generated by
# scripts/make_packages.tcl
# Don't edit by hand
###
set dir [file dirname [file normalize [info script]]]
}

#foreach directory [glob [file join $base *]] {
#  if {[file isdirectory $directory]} {
#    puts $directory
#    set result [sniffPath $directory stack]
#  }
#}
# [lindex $argv 0]

while {[llength $stack]} {
  set stackpath [lindex $stack 0]
  set stack [lrange $stack 1 end]
  foreach {type file} [sniffPath $stackpath stack] { 
    lappend result $type $file
  }
}
set i [string length $base]
foreach {type file} $result {
    switch $type {
        module {
            set fname [file rootname [file tail $file]]
            set package [lindex [split $fname -] 0]
            set version [lindex [split $fname -] 1]
            set dir [string trimleft [string range [file dirname $file] $i end] /]
            puts $fout "package forget $package"
            puts $fout "package ifneeded $package $version \[list source \[file join \$dir $dir [file tail $file]\]\]"
            #::codebale::read_tclsourcefile $file
        }
        source {
            if { $file == "$base/pkgIndex.tcl" } continue
            if { $file == "$base/packages.tcl" } continue
            if { $file == "$base/main.tcl" } continue
            if { [file tail $file] == "version_info.tcl" } continue
            set fin [open $file r]
            set dat [read $fin]
            close $fin
            if {[regexp "package provide" $dat]} {
               set fname [file rootname [file tail $file]]

               set dir [string trimleft [string range [file dirname $file] $i end] /]
            
               foreach line [split $dat \n] {
                  set line [string trim $line]
                  
                  if { [string range $line 0 14] != "package provide" } continue
                  set package [lindex $line 2]
                  set version [lindex $line 3]
                  puts $fout "package forget $package"
                  puts $fout "package ifneeded $package $version \[list source \[file join \$dir $dir [file tail $file]\]\]"
		  break
               }
            }
            #read_tclsourcefile $file
            #if { $tclCompiler != {} } {
            #   exec $tclCompiler $file
            #   file rename -force [file rootname $file].tbc $file
            #}
        }
    }
}
close $fout
#meta_output $base/build/help.rc
exit 0
