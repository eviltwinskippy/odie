###
# ROUTINE TO BUILD A PACKAGE LOADER FOR EVERY EXTENSION
# STITCHED INTO AN ODIE BUILD
###

::namespace eval ::codebale {}

###
# topic: d8ef9620-b068-3a82-3761-1725abc83192
###
proc ::codebale::sniffPath {spath stackvar} {
  upvar 1 $stackvar stack    
  set result {}
  if { ![file isdirectory $spath] } {
    switch [file extension $spath] {
      .tm {
        return [list parent_name $spath]
      }
      .tcl {
        return [list source $spath]
      }
    }    
    return
  }
  foreach f [glob -nocomplain $spath/*] {
    if {[file isdirectory $f]} {
      if {[file tail $f] in {CVS build} } continue
      if {[file extension $f] eq ".vfs" } continue
      set stack [linsert $stack 0 $f]
    }
  }
  set idx 0
  foreach idxtype {
    pkgIndex.tcl tclIndex
  } {
    if {[file exists [file join $spath $idxtype]]} {
      lappend result index [file join $spath $idxtype]
    }
  }
  if {[llength $result]} {
    return $result
  }
  foreach f [glob -nocomplain $spath/*] {
    if {![file isdirectory $f]} {
      set stack [linsert $stack 0 $f]
    }
  }
  return {}
}

#set odie [file dirname [file dirname [file normalize [info script]]]]
#source [file join $base lib odieutil codebale.tcl]

set base [lindex $argv 0]
set tclCompiler [lindex $argv 1]
set stack {}
set idxfile [file join $base packages.tcl]
if {[file exists $idxfile]} {
  file delete $idxfile
}

set stack {}
set buffer {
set ::SRCDIR [file dirname [file normalize [info script]]]
namespace eval ::starkit {
  variable topdir
  set topdir $::SRCDIR
}
}
set base [file normalize $base]
set i    [string length  $base]
set result [::codebale::sniffPath $base stack]
while {[llength $stack]} {
  set stackpath [lindex $stack 0]
  set stack [lrange $stack 1 end]
  lappend result {*}[::codebale::sniffPath $stackpath stack]
}
foreach {type file} $result {
  switch $type {
    parent_name {
      set file [file normalize $file]
      set fname [file rootname [file tail $file]]
      ###
      # Assume the package is correct in the filename
      ###
      set package [lindex [split $fname -] 0]
      set version [lindex [split $fname -] 1]
      set path [string trimleft [string range [file dirname $file] $i end] /]
      ###
      # Read the file, and override assumptions as needed
      ###
      set fin [open $file r]
      set dat [read $fin]
      close $fin
      foreach line [split $dat \n] {
        set line [string trim $line]
        if { [string range $line 0 9] != "# Package " } continue
        set package [lindex $line 2]
        set version [lindex $line 3]
        break
      }
      append buffer "package ifneeded $package $version \[list source \[file join \$::SRCDIR $path [file tail $file]\]\]"
      append buffer \n
    }
    source {
      set file [file normalize $file]
      if { $file == [file join $base tcl8.6 package.tcl] } continue
      if { $file == [file join $base packages.tcl] } continue
      if { $file == [file join $base main.tcl] } continue
      if { [file tail $file] == "version_info.tcl" } continue
      set fin [open $file r]
      set dat [read $fin]
      close $fin
      if {![regexp "package provide" $dat]} continue
      set fname [file rootname [file tail $file]]
      set dir [string trimleft [string range [file dirname $file] $i end] /]
      
      foreach line [split $dat \n] {
        set line [string trim $line]              
        if { [string range $line 0 14] != "package provide" } continue
        set package [lindex $line 2]
        set version [lindex $line 3]
        append buffer "package ifneeded $package $version \[list source \[file join \$::SRCDIR $dir [file tail $file]\]\]"
        append buffer \n
        break
      }
    }
    index {
      puts [list index $file]
      if {[file dirname $file] eq $base } continue
      set dir [string trimleft [string range [file dirname $file] $i end] /]
      append buffer "set dir \[file join \$::SRCDIR $dir\] \; source \[file join \$::SRCDIR $dir [file tail $file]\]"
      append buffer \n
    }
  }
}


set fout [open $idxfile w]
puts $fout {# Tcl package index file, version 1.1
# This file is generated by the "makeLoader.tcl" command
# and sourced either when an application starts up.
# It invokes the
# "package ifneeded" command to set up package-related
# information so that packages will be loaded automatically
# in response to "package require" commands.  When this
# script is sourced, the variable $SRCDIR is derived from
# the present location of the script.
# This system defers to any existing pkgIndex.tcl scripts
# that exist in the path, as they may contain addition setup
# logic.
}
puts $fout $buffer
close $fout
exit 0

